{"/home/travis/build/npmtest/node-npmtest-tiny-lr/test.js":"/* istanbul instrument in package npmtest_tiny_lr */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-tiny-lr/lib.npmtest_tiny_lr.js":"/* istanbul instrument in package npmtest_tiny_lr */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_tiny_lr = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_tiny_lr = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-tiny-lr/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-tiny-lr && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_tiny_lr */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_tiny_lr\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_tiny_lr.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_tiny_lr.rollup.js'] =\n            local.assetsDict['/assets.npmtest_tiny_lr.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_tiny_lr.__dirname + '/lib.npmtest_tiny_lr.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-tiny-lr/node_modules/tiny-lr/src/index.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _server = require('./server');\n\nvar _server2 = _interopRequireDefault(_server);\n\nvar _client = require('./client');\n\nvar _client2 = _interopRequireDefault(_client);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar debug = require('debug')('tinylr');\n\n// Need to keep track of LR servers when notifying\nvar servers = [];\n\nexports.default = tinylr;\n\n// Expose Server / Client objects\n\ntinylr.Server = _server2.default;\ntinylr.Client = _client2.default;\n\n// and the middleware helpers\ntinylr.middleware = middleware;\ntinylr.changed = changed;\n\n// Main entry point\nfunction tinylr(opts) {\n  var srv = new _server2.default(opts);\n  servers.push(srv);\n  return srv;\n}\n\n// A facade to Server#handle\nfunction middleware(opts) {\n  var srv = new _server2.default(opts);\n  servers.push(srv);\n  return function tinylr(req, res, next) {\n    srv.handler(req, res, next);\n  };\n}\n\n// Changed helper, helps with notifying the server of a file change\nfunction changed(done) {\n  var files = [].slice.call(arguments);\n  if (files[files.length - 1] === 'function') done = files.pop();\n  done = typeof done === 'function' ? done : function () {};\n  debug('Notifying %d servers - Files: ', servers.length, files);\n  servers.forEach(function (srv) {\n    var params = { params: { files: files } };\n    srv && srv.changed(params);\n  });\n  done();\n}\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-tiny-lr/node_modules/tiny-lr/src/server.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nvar _http = require('http');\n\nvar _http2 = _interopRequireDefault(_http);\n\nvar _https = require('https');\n\nvar _https2 = _interopRequireDefault(_https);\n\nvar _events = require('events');\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _url = require('url');\n\nvar _client = require('./client');\n\nvar _client2 = _interopRequireDefault(_client);\n\nvar _package = require('../package.json');\n\nvar _package2 = _interopRequireDefault(_package);\n\nvar _any = require('body/any');\n\nvar _any2 = _interopRequireDefault(_any);\n\nvar _qs = require('qs');\n\nvar _qs2 = _interopRequireDefault(_qs);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar debug = require('debug')('tinylr:server');\n\nvar CONTENT_TYPE = 'content-type';\nvar FORM_TYPE = 'application/x-www-form-urlencoded';\n\nvar Server = function (_events$EventEmitter) {\n  _inherits(Server, _events$EventEmitter);\n\n  function Server() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Server);\n\n    var _this = _possibleConstructorReturn(this, (Server.__proto__ || Object.getPrototypeOf(Server)).call(this));\n\n    _this.options = options;\n\n    options.livereload = options.livereload || require.resolve('livereload-js/dist/livereload.js');\n\n    // todo: change falsy check to allow 0 for random port\n    options.port = parseInt(options.port || 35729, 10);\n\n    if (options.errorListener) {\n      _this.errorListener = options.errorListener;\n    }\n\n    _this.clients = {};\n    _this.configure(options.app);\n    _this.routes(options.app);\n    return _this;\n  }\n\n  _createClass(Server, [{\n    key: 'routes',\n    value: function routes() {\n      if (!this.options.dashboard) {\n        this.on('GET /', this.index.bind(this));\n      }\n\n      this.on('GET /changed', this.changed.bind(this));\n      this.on('POST /changed', this.changed.bind(this));\n      this.on('POST /alert', this.alert.bind(this));\n      this.on('GET /livereload.js', this.livereload.bind(this));\n      this.on('GET /kill', this.close.bind(this));\n    }\n  }, {\n    key: 'configure',\n    value: function configure(app) {\n      var _this2 = this;\n\n      debug('Configuring %s', app ? 'connect / express application' : 'HTTP server');\n\n      var handler = this.options.handler || this.handler;\n\n      if (!app) {\n        if (this.options.key && this.options.cert || this.options.pfx) {\n          this.server = _https2.default.createServer(this.options, handler.bind(this));\n        } else {\n          this.server = _http2.default.createServer(handler.bind(this));\n        }\n\n        this.server.on('upgrade', this.websocketify.bind(this));\n        this.server.on('error', this.error.bind(this));\n        return this;\n      }\n\n      this.app = app;\n      this.app.listen = function (port, done) {\n        done = done || function () {};\n        if (port !== _this2.options.port) {\n          debug('Warn: LiveReload port is not standard (%d). You are listening on %d', _this2.options.port, port);\n          debug('You\\'ll need to rely on the LiveReload snippet');\n          debug('> http://feedback.livereload.com/knowledgebase/articles/86180-how-do-i-add-the-script-tag-manually-');\n        }\n\n        var srv = _this2.server = _http2.default.createServer(app);\n        srv.on('upgrade', _this2.websocketify.bind(_this2));\n        srv.on('error', _this2.error.bind(_this2));\n        srv.on('close', _this2.close.bind(_this2));\n        return srv.listen(port, done);\n      };\n\n      return this;\n    }\n  }, {\n    key: 'handler',\n    value: function handler(req, res, next) {\n      var _this3 = this;\n\n      var middleware = typeof next === 'function';\n      debug('LiveReload handler %s (middleware: %s)', req.url, middleware ? 'on' : 'off');\n\n      next = next || this.defaultHandler.bind(this, res);\n      req.headers[CONTENT_TYPE] = req.headers[CONTENT_TYPE] || FORM_TYPE;\n      return (0, _any2.default)(req, res, function (err, body) {\n        if (err) return next(err);\n        req.body = body;\n\n        if (!req.query) {\n          req.query = req.url.indexOf('?') !== -1 ? _qs2.default.parse((0, _url.parse)(req.url).query) : {};\n        }\n\n        return _this3.handle(req, res, next);\n      });\n    }\n  }, {\n    key: 'index',\n    value: function index(req, res) {\n      res.setHeader('Content-Type', 'application/json');\n      res.write(JSON.stringify({\n        tinylr: 'Welcome',\n        version: _package2.default.version\n      }));\n\n      res.end();\n    }\n  }, {\n    key: 'handle',\n    value: function handle(req, res, next) {\n      var url = (0, _url.parse)(req.url);\n      debug('Request:', req.method, url.href);\n      var middleware = typeof next === 'function';\n\n      // do the routing\n      var route = req.method + ' ' + url.pathname;\n      var respond = this.emit(route, req, res);\n      if (respond) return;\n\n      if (middleware) return next();\n\n      // Only apply content-type on non middleware setup #70\n      return this.notFound(res);\n    }\n  }, {\n    key: 'defaultHandler',\n    value: function defaultHandler(res, err) {\n      if (!err) return this.notFound(res);\n\n      this.error(err);\n      res.setHeader('Content-Type', 'text/plain');\n      res.statusCode = 500;\n      res.end('Error: ' + err.stack);\n    }\n  }, {\n    key: 'notFound',\n    value: function notFound(res) {\n      res.setHeader('Content-Type', 'application/json');\n      res.writeHead(404);\n      res.write(JSON.stringify({\n        error: 'not_found',\n        reason: 'no such route'\n      }));\n      res.end();\n    }\n  }, {\n    key: 'websocketify',\n    value: function websocketify(req, socket, head) {\n      var _this4 = this;\n\n      var client = new _client2.default(req, socket, head, this.options);\n      this.clients[client.id] = client;\n\n      // handle socket error to prevent possible app crash, such as ECONNRESET\n      socket.on('error', function (e) {\n        // ignore frequent ECONNRESET error (seems inevitable when refresh)\n        if (e.code === 'ECONNRESET') return;\n        _this4.error.apply(_this4, e);\n      });\n\n      client.once('info', function (data) {\n        debug('Create client %s (url: %s)', data.id, data.url);\n        _this4.emit('MSG /create', data.id, data.url);\n      });\n\n      client.once('end', function () {\n        debug('Destroy client %s (url: %s)', client.id, client.url);\n        _this4.emit('MSG /destroy', client.id, client.url);\n        delete _this4.clients[client.id];\n      });\n    }\n  }, {\n    key: 'listen',\n    value: function listen(port, host, fn) {\n      port = port || this.options.port;\n\n      // Last used port for error display\n      this.port = port;\n\n      if (typeof host === 'function') {\n        fn = host;\n        host = undefined;\n      }\n\n      this.server.listen(port, host, fn);\n    }\n  }, {\n    key: 'close',\n    value: function close(req, res) {\n      Object.keys(this.clients).forEach(function (id) {\n        this.clients[id].close();\n      }, this);\n\n      if (this.server._handle) this.server.close(this.emit.bind(this, 'close'));\n\n      if (res) res.end();\n    }\n  }, {\n    key: 'error',\n    value: function error(e) {\n      if (this.errorListener) {\n        this.errorListener(e);\n        return;\n      }\n\n      console.error();\n      console.error('... Uhoh. Got error %s ...', e.message);\n      console.error(e.stack);\n\n      if (e.code !== 'EADDRINUSE') return;\n      console.error();\n      console.error('You already have a server listening on %s', this.port);\n      console.error('You should stop it and try again.');\n      console.error();\n    }\n\n    // Routes\n\n  }, {\n    key: 'livereload',\n    value: function livereload(req, res) {\n      res.setHeader('Content-Type', 'application/javascript');\n      _fs2.default.createReadStream(this.options.livereload).pipe(res);\n    }\n  }, {\n    key: 'changed',\n    value: function changed(req, res) {\n      var files = this.param('files', req);\n\n      debug('Changed event (Files: %s)', files.join(' '));\n      var clients = this.notifyClients(files);\n\n      if (!res) return;\n\n      res.setHeader('Content-Type', 'application/json');\n      res.write(JSON.stringify({\n        clients: clients,\n        files: files\n      }));\n\n      res.end();\n    }\n  }, {\n    key: 'alert',\n    value: function alert(req, res) {\n      var message = this.param('message', req);\n\n      debug('Alert event (Message: %s)', message);\n      var clients = this.alertClients(message);\n\n      if (!res) return;\n\n      res.setHeader('Content-Type', 'application/json');\n      res.write(JSON.stringify({\n        clients: clients,\n        message: message\n      }));\n\n      res.end();\n    }\n  }, {\n    key: 'notifyClients',\n    value: function notifyClients(files) {\n      var clients = Object.keys(this.clients).map(function (id) {\n        var client = this.clients[id];\n        debug('Reloading client %s (url: %s)', client.id, client.url);\n        client.reload(files);\n        return {\n          id: client.id,\n          url: client.url\n        };\n      }, this);\n\n      return clients;\n    }\n  }, {\n    key: 'alertClients',\n    value: function alertClients(message) {\n      var clients = Object.keys(this.clients).map(function (id) {\n        var client = this.clients[id];\n        debug('Alert client %s (url: %s)', client.id, client.url);\n        client.alert(message);\n        return {\n          id: client.id,\n          url: client.url\n        };\n      }, this);\n\n      return clients;\n    }\n\n    // Lookup param from body / params / query.\n\n  }, {\n    key: 'param',\n    value: function param(name, req) {\n      var param = void 0;\n      if (req.body && req.body[name]) param = req.body[name];else if (req.params && req.params[name]) param = req.params[name];else if (req.query && req.query[name]) param = req.query[name];\n\n      // normalize files array\n      if (name === 'files') {\n        param = Array.isArray(param) ? param : typeof param === 'string' ? param.split(/[\\s,]/) : [];\n      }\n\n      return param;\n    }\n  }]);\n\n  return Server;\n}(_events2.default.EventEmitter);\n\nexports.default = Server;\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-tiny-lr/node_modules/tiny-lr/src/client.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _events = require('events');\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _fayeWebsocket = require('faye-websocket');\n\nvar _fayeWebsocket2 = _interopRequireDefault(_fayeWebsocket);\n\nvar _objectAssign = require('object-assign');\n\nvar _objectAssign2 = _interopRequireDefault(_objectAssign);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar debug = require('debug')('tinylr:client');\n\nvar idCounter = 0;\n\nvar Client = function (_events$EventEmitter) {\n  _inherits(Client, _events$EventEmitter);\n\n  function Client(req, socket, head) {\n    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n    _classCallCheck(this, Client);\n\n    var _this = _possibleConstructorReturn(this, (Client.__proto__ || Object.getPrototypeOf(Client)).call(this));\n\n    _this.options = options;\n    _this.ws = new _fayeWebsocket2.default(req, socket, head);\n    _this.ws.onmessage = _this.message.bind(_this);\n    _this.ws.onclose = _this.close.bind(_this);\n    _this.id = _this.uniqueId('ws');\n    return _this;\n  }\n\n  _createClass(Client, [{\n    key: 'message',\n    value: function message(event) {\n      var data = this.data(event);\n      if (this[data.command]) return this[data.command](data);\n    }\n  }, {\n    key: 'close',\n    value: function close(event) {\n      if (this.ws) {\n        this.ws.close();\n        this.ws = null;\n      }\n\n      this.emit('end', event);\n    }\n\n    // Commands\n\n  }, {\n    key: 'hello',\n    value: function hello() {\n      this.send({\n        command: 'hello',\n        protocols: ['http://livereload.com/protocols/official-7'],\n        serverName: 'tiny-lr'\n      });\n    }\n  }, {\n    key: 'info',\n    value: function info(data) {\n      if (data) {\n        debug('Info', data);\n        this.emit('info', (0, _objectAssign2.default)({}, data, { id: this.id }));\n        this.plugins = data.plugins;\n        this.url = data.url;\n      }\n\n      return (0, _objectAssign2.default)({}, data || {}, { id: this.id, url: this.url });\n    }\n\n    // Server commands\n\n  }, {\n    key: 'reload',\n    value: function reload(files) {\n      files.forEach(function (file) {\n        this.send({\n          command: 'reload',\n          path: file,\n          liveCSS: this.options.liveCSS !== false,\n          liveImg: this.options.liveImg !== false\n        });\n      }, this);\n    }\n  }, {\n    key: 'alert',\n    value: function alert(message) {\n      this.send({\n        command: 'alert',\n        message: message\n      });\n    }\n\n    // Utilities\n\n  }, {\n    key: 'data',\n    value: function data(event) {\n      var data = {};\n      try {\n        data = JSON.parse(event.data);\n      } catch (e) {}\n      return data;\n    }\n  }, {\n    key: 'send',\n    value: function send(data) {\n      if (!this.ws) return;\n      this.ws.send(JSON.stringify(data));\n    }\n  }, {\n    key: 'uniqueId',\n    value: function uniqueId(prefix) {\n      var id = idCounter++;\n      return prefix ? prefix + id : id;\n    }\n  }]);\n\n  return Client;\n}(_events2.default.EventEmitter);\n\nexports.default = Client;\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-tiny-lr/node_modules/tiny-lr/lib/client.js":"import events       from 'events';\nimport WebSocket    from 'faye-websocket';\nimport objectAssign from 'object-assign';\n\nconst debug = require('debug')('tinylr:client');\n\nlet idCounter = 0;\n\nexport default class Client extends events.EventEmitter {\n\n  constructor (req, socket, head, options = {}) {\n    super();\n    this.options = options;\n    this.ws = new WebSocket(req, socket, head);\n    this.ws.onmessage = this.message.bind(this);\n    this.ws.onclose = this.close.bind(this);\n    this.id = this.uniqueId('ws');\n  }\n\n  message (event) {\n    let data = this.data(event);\n    if (this[data.command]) return this[data.command](data);\n  }\n\n  close (event) {\n    if (this.ws) {\n      this.ws.close();\n      this.ws = null;\n    }\n\n    this.emit('end', event);\n  }\n\n  // Commands\n  hello () {\n    this.send({\n      command: 'hello',\n      protocols: [\n        'http://livereload.com/protocols/official-7'\n      ],\n      serverName: 'tiny-lr'\n    });\n  }\n\n  info (data) {\n    if (data) {\n      debug('Info', data);\n      this.emit('info', objectAssign({}, data, { id: this.id }));\n      this.plugins = data.plugins;\n      this.url = data.url;\n    }\n\n    return objectAssign({}, data || {}, { id: this.id, url: this.url });\n  }\n\n  // Server commands\n  reload (files) {\n    files.forEach(function (file) {\n      this.send({\n        command: 'reload',\n        path: file,\n        liveCSS: this.options.liveCSS !== false,\n        liveImg: this.options.liveImg !== false\n      });\n    }, this);\n  }\n\n  alert (message) {\n    this.send({\n      command: 'alert',\n      message: message\n    });\n  }\n\n  // Utilities\n  data (event) {\n    let data = {};\n    try {\n      data = JSON.parse(event.data);\n    } catch (e) {}\n    return data;\n  }\n\n  send (data) {\n    if (!this.ws) return;\n    this.ws.send(JSON.stringify(data));\n  }\n\n  uniqueId (prefix) {\n    let id = idCounter++;\n    return prefix ? prefix + id : id;\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-tiny-lr/node_modules/tiny-lr/lib/server.js":"import fs      from 'fs';\nimport http    from 'http';\nimport https   from 'https';\nimport events  from 'events';\nimport {parse} from 'url';\nimport Client  from './client';\nimport config  from '../package.json';\nimport anybody from 'body/any';\nimport qs      from 'qs';\n\nconst debug = require('debug')('tinylr:server');\n\nconst CONTENT_TYPE = 'content-type';\nconst FORM_TYPE = 'application/x-www-form-urlencoded';\n\nclass Server extends events.EventEmitter {\n  constructor (options = {}) {\n    super();\n\n    this.options = options;\n\n    options.livereload = options.livereload || require.resolve('livereload-js/dist/livereload.js');\n\n    // todo: change falsy check to allow 0 for random port\n    options.port = parseInt(options.port || 35729, 10);\n\n    if (options.errorListener) {\n      this.errorListener = options.errorListener;\n    }\n\n    this.clients = {};\n    this.configure(options.app);\n    this.routes(options.app);\n  }\n\n  routes () {\n    if (!this.options.dashboard) {\n      this.on('GET /', this.index.bind(this));\n    }\n\n    this.on('GET /changed', this.changed.bind(this));\n    this.on('POST /changed', this.changed.bind(this));\n    this.on('POST /alert', this.alert.bind(this));\n    this.on('GET /livereload.js', this.livereload.bind(this));\n    this.on('GET /kill', this.close.bind(this));\n  }\n\n  configure (app) {\n    debug('Configuring %s', app ? 'connect / express application' : 'HTTP server');\n\n    let handler = this.options.handler || this.handler;\n\n    if (!app) {\n      if ((this.options.key && this.options.cert) || this.options.pfx) {\n        this.server = https.createServer(this.options, handler.bind(this));\n      } else {\n        this.server = http.createServer(handler.bind(this));\n      }\n\n      this.server.on('upgrade', this.websocketify.bind(this));\n      this.server.on('error', this.error.bind(this));\n      return this;\n    }\n\n    this.app = app;\n    this.app.listen = (port, done) => {\n      done = done || function () {};\n      if (port !== this.options.port) {\n        debug('Warn: LiveReload port is not standard (%d). You are listening on %d', this.options.port, port);\n        debug('You\\'ll need to rely on the LiveReload snippet');\n        debug('> http://feedback.livereload.com/knowledgebase/articles/86180-how-do-i-add-the-script-tag-manually-');\n      }\n\n      let srv = this.server = http.createServer(app);\n      srv.on('upgrade', this.websocketify.bind(this));\n      srv.on('error', this.error.bind(this));\n      srv.on('close', this.close.bind(this));\n      return srv.listen(port, done);\n    };\n\n    return this;\n  }\n\n  handler (req, res, next) {\n    let middleware = typeof next === 'function';\n    debug('LiveReload handler %s (middleware: %s)', req.url, middleware ? 'on' : 'off');\n\n    next = next || this.defaultHandler.bind(this, res);\n    req.headers[CONTENT_TYPE] = req.headers[CONTENT_TYPE] || FORM_TYPE;\n    return anybody(req, res, (err, body) => {\n      if (err) return next(err);\n      req.body = body;\n\n      if (!req.query) {\n        req.query = req.url.indexOf('?') !== -1\n          ? qs.parse(parse(req.url).query)\n          : {};\n      }\n\n      return this.handle(req, res, next);\n    });\n  }\n\n  index (req, res) {\n    res.setHeader('Content-Type', 'application/json');\n    res.write(JSON.stringify({\n      tinylr: 'Welcome',\n      version: config.version\n    }));\n\n    res.end();\n  }\n\n  handle (req, res, next) {\n    let url = parse(req.url);\n    debug('Request:', req.method, url.href);\n    let middleware = typeof next === 'function';\n\n    // do the routing\n    let route = req.method + ' ' + url.pathname;\n    let respond = this.emit(route, req, res);\n    if (respond) return;\n\n    if (middleware) return next();\n\n    // Only apply content-type on non middleware setup #70\n    return this.notFound(res);\n  }\n\n  defaultHandler (res, err) {\n    if (!err) return this.notFound(res);\n\n    this.error(err);\n    res.setHeader('Content-Type', 'text/plain');\n    res.statusCode = 500;\n    res.end('Error: ' + err.stack);\n  }\n\n  notFound (res) {\n    res.setHeader('Content-Type', 'application/json');\n    res.writeHead(404);\n    res.write(JSON.stringify({\n      error: 'not_found',\n      reason: 'no such route'\n    }));\n    res.end();\n  }\n\n  websocketify (req, socket, head) {\n    let client = new Client(req, socket, head, this.options);\n    this.clients[client.id] = client;\n\n    // handle socket error to prevent possible app crash, such as ECONNRESET\n    socket.on('error', (e) => {\n      // ignore frequent ECONNRESET error (seems inevitable when refresh)\n      if (e.code === 'ECONNRESET') return;\n      this.error.apply(this, e);\n    });\n\n    client.once('info', (data) => {\n      debug('Create client %s (url: %s)', data.id, data.url);\n      this.emit('MSG /create', data.id, data.url);\n    });\n\n    client.once('end', () => {\n      debug('Destroy client %s (url: %s)', client.id, client.url);\n      this.emit('MSG /destroy', client.id, client.url);\n      delete this.clients[client.id];\n    });\n  }\n\n  listen (port, host, fn) {\n    port = port || this.options.port;\n\n    // Last used port for error display\n    this.port = port;\n\n    if (typeof host === 'function') {\n      fn = host;\n      host = undefined;\n    }\n\n    this.server.listen(port, host, fn);\n  }\n\n  close (req, res) {\n    Object.keys(this.clients).forEach(function (id) {\n      this.clients[id].close();\n    }, this);\n\n    if (this.server._handle) this.server.close(this.emit.bind(this, 'close'));\n\n    if (res) res.end();\n  }\n\n  error (e) {\n    if (this.errorListener) {\n      this.errorListener(e);\n      return;\n    }\n\n    console.error();\n    console.error('... Uhoh. Got error %s ...', e.message);\n    console.error(e.stack);\n\n    if (e.code !== 'EADDRINUSE') return;\n    console.error();\n    console.error('You already have a server listening on %s', this.port);\n    console.error('You should stop it and try again.');\n    console.error();\n  }\n\n  // Routes\n\n  livereload (req, res) {\n    res.setHeader('Content-Type', 'application/javascript');\n    fs.createReadStream(this.options.livereload).pipe(res);\n  }\n\n  changed (req, res) {\n    let files = this.param('files', req);\n\n    debug('Changed event (Files: %s)', files.join(' '));\n    let clients = this.notifyClients(files);\n\n    if (!res) return;\n\n    res.setHeader('Content-Type', 'application/json');\n    res.write(JSON.stringify({\n      clients: clients,\n      files: files\n    }));\n\n    res.end();\n  }\n\n  alert (req, res) {\n    let message = this.param('message', req);\n\n    debug('Alert event (Message: %s)', message);\n    let clients = this.alertClients(message);\n\n    if (!res) return;\n\n    res.setHeader('Content-Type', 'application/json');\n    res.write(JSON.stringify({\n      clients: clients,\n      message: message\n    }));\n\n    res.end();\n  }\n\n  notifyClients (files) {\n    let clients = Object.keys(this.clients).map(function (id) {\n      let client = this.clients[id];\n      debug('Reloading client %s (url: %s)', client.id, client.url);\n      client.reload(files);\n      return {\n        id: client.id,\n        url: client.url\n      };\n    }, this);\n\n    return clients;\n  };\n\n  alertClients (message) {\n    let clients = Object.keys(this.clients).map(function (id) {\n      let client = this.clients[id];\n      debug('Alert client %s (url: %s)', client.id, client.url);\n      client.alert(message);\n      return {\n        id: client.id,\n        url: client.url\n      };\n    }, this);\n\n    return clients;\n  }\n\n  // Lookup param from body / params / query.\n  param (name, req) {\n    let param;\n    if (req.body && req.body[name]) param = req.body[name];\n    else if (req.params && req.params[name]) param = req.params[name];\n    else if (req.query && req.query[name]) param = req.query[name];\n\n    // normalize files array\n    if (name === 'files') {\n      param = Array.isArray(param) ? param\n        : typeof param === 'string' ? param.split(/[\\s,]/)\n        : [];\n    }\n\n    return param;\n  }\n}\n\nexport default Server;\n"}